{"ts":1363326357208,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* \r\n    @name Singletonify - By javarouka (MIT Licensed)    \r\n    @url http://blog.javarouka.me/2012/02/javascripts-pattern-1-singeton-patterrn.html\r\n*/\r\nvar Singletonify = function(cons) {\r\n    \r\n    // 유일 객체 변수\r\n    var INSTANCE;\r\n    \r\n    // 클로저 생성\r\n    var c = function() {\r\n        // 유일 객체가 정의되지 않았다면 객체를 생성.\r\n        if(INSTANCE === undefined) {\r\n            \r\n            // 여기서부터 new 연산자의 내용을 흉내냅니다.\r\n            \r\n            // 새 함수를 선언하고 인자로 전달받은 함수의 프로토타입으로 연결합니다.\r\n            var F = function() {};\r\n            F.prototype = cons.prototype;\r\n            \r\n            // 객체를 생성하고 생성된 객체를 컨텍스트로 호출합니다.            \r\n            var t = new F();\r\n            var ret = cons.apply(t, Array.prototype.slice.call(arguments));\r\n            \r\n            // 이때, 반환값이 객체이면 객체를, 아니라면 위의 객체를\r\n            // 생성 객체로 지정합니다.\r\n            INSTANCE = (typeof ret === 'object') ? ret : t;             \r\n        }\r\n        \r\n        // 객체를 리턴합니다.\r\n        return INSTANCE;\r\n    }\r\n\r\n    // 팩토리 메서드로도 접근할 수 있게 합니다\r\n    c.getInstance = function() {\r\n        return c.apply(null, Array.prototype.slice.call(arguments));\r\n    }\r\n\r\n    // 생성자를 대체한 클로저를 리턴\r\n    return c;\r\n};\r\n\r\n// 테스트 함수\r\nfunction javarouka(value) {\r\n    this.v = value;\r\n}\r\n\r\n// 싱글톤화\r\nvar Single = Singletonify(javarouka);\r\n\r\n// 테스트\r\nvar s1 = Single.getInstance(\"hello\");\r\nvar s2 = new Single(\"javascript\");\r\nvar s3 = new Single(\"world\");\r\n\r\nconsole.log(s1 === s2); // true\r\nconsole.log(s2 === s3); // true\r\n\r\nconsole.log(s1.v); // hello\r\nconsole.log(s2.v); // hello\r\nconsole.log(s3.v); // hello"]],"start1":0,"start2":0,"length1":0,"length2":1558}]],"length":1558}
