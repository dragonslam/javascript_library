{"ts":1361930256134,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1361930159540,"patch":[[{"diffs":[[1,"var spec = {\r\n    url: '/some/path/data',\r\n    callback: function(data) { }, // 콜백 지정\r\n    parser: function jsonParser(data) { } // 파서 지정\r\n};\r\n// 모듈화. 생성 인자로 객체를 받는다.\r\n// spec 객체를 바탕으로 객체 생성.\r\nvar dataModule = (function(spec) {\r\n    \r\n    // private 영역 시작\r\n\r\n    // 데이터 캐시\r\n    var dataCache = {};\r\n    \r\n    // 데이터 캐시 아이디\r\n    var id = 0;\r\n    \r\n    var url = spec.url || '/default/data';\r\n    // ... 기타 사용 변수\r\n    \r\n    var connectServer = function() { }\r\n    var sendRequest = function(opt) { }\r\n    var parseData = spec.parser || function(data) {};\r\n    \r\n    var callback = spec.callback || function() { };    \r\n    var headers = spec.headers || {};\r\n\r\n    // private 영역 끝.\r\n    \r\n    \r\n    // 필요한 것만 공개. 접근 제한은 public이 된다\r\n    // 리턴되는 객체의 메서드들은 클로저로서\r\n    // private 영역의 변수에 접근이 가능하다.\r\n    return {\r\n        send: function() {\r\n            connectServer(spec.url, spec.method);\r\n            var data = sendRequest(headers);\r\n            dataCache[id++] = data;\r\n            return parseData(data, callback);\r\n        },\r\n        cache: function(id) { return dataCache[id]; },\r\n        getLastCacheId: function() { return id; }\r\n    } \r\n    \r\n})(spec); // 익명 함수를 바로 실행\r\n\r\n// @Test 코드\r\n// 데이터 요청\r\nvar rs = dataModule.send();\r\nconsole.log(dataModule.getLastCacheId()) // 마지막 요청 아이디"]],"start1":0,"start2":0,"length1":0,"length2":1284}]],"length":1284,"saved":false}
